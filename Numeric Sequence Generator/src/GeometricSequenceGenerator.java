//////////////////// ALL ASSIGNMENTS INCLUDE THIS SECTION /////////////////////
//
// Title: GeometricSequenceGenerator
// Files: ArithmeticSequenceGenerator.java,DigitProductSequenceGenerator.java
// ,FibonacciSequenceGenerator.java,GeometricSequenceGenerator.java,
// Sequence.java,SequenceGeneratorTests.java,
// Course: CS300,fall,2018
//
// Author: Yida Wu
// Email: ywu479@wisc.edu
// Lecturer's Name: Gary Dahl
//
//////////////////// PAIR PROGRAMMERS COMPLETE THIS SECTION ///////////////////
//
// Partner Name: (name of your pair programming partner)
// Partner Email: (email address of your programming partner)
// Partner Lecturer's Name: (name of your partner's lecturer)
//
// VERIFY THE FOLLOWING BY PLACING AN X NEXT TO EACH TRUE STATEMENT:
// ___ Write-up states that pair programming is allowed for this assignment.
// ___ We have both read and understand the course Pair Programming Policy.
// ___ We have registered our team prior to the team registration deadline.
//
///////////////////////////// CREDIT OUTSIDE HELP /////////////////////////////
//
// Students who get help from sources other than their partner must fully
// acknowledge and credit those sources of help here. Instructors and TAs do
// not need to be credited here, but tutors, friends, relatives, room mates,
// strangers, and others do. If you received no outside help from either type
// of source, then please explicitly indicate NONE.
//
// Persons: None
// Online Sources: None
//
/////////////////////////////// 80 COLUMNS WIDE ///////////////////////////////

import java.util.Iterator;

/**
 * this class is used to generator the correct Fibonacci sequence. This class implements the
 * Iterator<Integer> interface
 * 
 * @author Yida
 */
public class GeometricSequenceGenerator implements Iterator<Integer> {
  private final int SIZE; // The number of elements in this sequence
  private final int INIT; // The first term in this sequence
  private final int RATIO; // The common ratio for this sequence
  private int next; // The next term in the sequence

  private int generatedCount; // The number of terms generated so far in this sequence
  // It refers also to the order of the next number to be generated by next() method

  // constructor
  /**
   * this is the constructor of the class. it will initiate values in an object.
   * 
   * @param init  the input initial value
   * @param ratio the input growth rate
   * @param size  the input size
   */
  public GeometricSequenceGenerator(int init, int ratio, int size) {
    if (ratio < 1 || init < 1) {
      throw new IllegalArgumentException(
          "WARNING: The starting element and the common ratio for a geometric progression should"
              + " be STRICTLY POSITIVE.");
    }
    if (size < 1) {
      throw new IllegalArgumentException("WARNING: CANNOT create a sequence with size <= zero.");
    }
    this.SIZE = size;
    this.INIT = init;
    this.RATIO = ratio;
    next = init; // initializes next to the first element in this arithmetic progression
    generatedCount = 0;
  }

  // TODO implement hasNext(), and next() methods here
  /**
   * Checks if the iteration has a next element in this sequence
   * 
   * @return true if the current element in the iteration has a next element in this sequence, false
   *         otherwise
   */
  @Override
  public boolean hasNext() {
    // time complexity: O(1)
    // TODO Your code comes here
    return generatedCount < SIZE;
  }

  /**
   * Returns the next element in this Geometric sequence iteration with respect to the numbers
   * generated so far
   * 
   * @return the next element in this iteration
   */
  @Override
  public Integer next() {
    // time complexity: O(1)
    // TODO your code comes here
    if (!hasNext()) // check if the current element has a next element in this sequence
      return null;
    int current = next; // set the current element to next
    generatedCount++; // increment the number of generated elements so far
    next *= RATIO; // set the next element
    return current; // return the current number as the generated one
  }

  // You can add local variable to your hasNext() or next() method to implement their correct
  // behavior if needed
  // You can add public getters and setters methods as needed to implement your test methods here
  // You CANNOT define mutators for any final field


}
